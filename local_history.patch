Index: Day2P2/Program.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Day2P2/Program.cs b/Day2P2/Program.cs
--- a/Day2P2/Program.cs	
+++ b/Day2P2/Program.cs	(date 1701889772897)
@@ -3,58 +3,197 @@
 
     internal class Program
     {
-
+    
         public static void Main(string[] args)
         {
-            string[] input = File.ReadAllText("../../../input.txt").Split("\n");
-            int totalpower = 0;
-            for (int i = 1; i <= input.Length; i++)
-            {
-                string line = input[i-1];
-                int[] maxvalues = new int[3];
-                string lineDetails = line.Split(": ")[1];
-                string[] games = lineDetails.Split("; ");
-                foreach (string game in games)
-                {
-                    Console.WriteLine("\t" + game);
-                    string[] cubedetails = game.Split(", ");
-                    foreach (string cube in cubedetails)
-                    {
-                        int amount = int.Parse(cube.Split(" ")[0]);
-                        string color = cube.Split(" ")[1];
-                        switch (color)
-                        {
-                            case "red":
-                                if (amount > maxvalues[0])
-                                {
-                                    maxvalues[0] = amount;
-                                }
-                                break;
-                            case "green":
-                                if (amount > maxvalues[1])
-                                {
-                                    maxvalues[1] = amount;
-                                }
-                                break;
-                            case "blue":
-                                if (amount > maxvalues[2])
-                                {
-                                    maxvalues[2] = amount;
-                                }
-                                break;
-                        }
-                    }
-                }
-                Console.WriteLine("\tFewest: ");
-                foreach (int max in maxvalues)
-                {
-                    Console.WriteLine("\t\t" + max);
-                }
-                
-                int power = maxvalues[0] * maxvalues[1] * maxvalues[2];
-                totalpower += power;
-            }
-            Console.WriteLine(totalpower);
-        }
-    }
+            var inputData = File.ReadAllLines("C:\\Users\\Coen\\RiderProjects\\oefeningen\\AdventOfCode23\\Day2P2\\input.txt");
+
+// var games = new List<Game>();
+
+// for (int i = 0; i < inputData.Length; i++)
+// {
+    // string? line = inputData[i];
+
+    // var roundsCombined = line[8..];
+    // var roundsSplit = roundsCombined.Split(';');
+
+    // var game = new Game { Number = i + 1 };
+    // foreach (var round in roundsSplit)
+    // {
+        // var cubes = round.Split(',').ToList();
+        // cubes.ForEach(x => x = x.Trim());
+
+        // var gameRound = new Game.Round();
+
+        // foreach (var cube in cubes)
+        // {
+            // int cubesNumber = int.Parse(cube.Where(char.IsDigit).ToArray());
+
+            // if (cube.Contains("red"))
+            // {
+                // gameRound.RedCubes = cubesNumber;
+            // }
+            // else if (cube.Contains("blue"))
+            // {
+                // gameRound.BlueCubes = cubesNumber;
+            // }
+            // else if (cube.Contains("green"))
+            // {
+                // gameRound.GreenCubes = cubesNumber;
+            // }
+        // }
+
+        // game.Rounds.Add(gameRound);
+    // }
+
+    // games.Add(game);
+// }
+
+// int possibleGamesCount = games.Where(x => x.IsPossible()).Sum(x => x.Number);
+
+// Console.WriteLine($"Part one: {possibleGamesCount}");
+
+// int cubesPower = games.Sum(x => x.GetGamePower());
+
+// Console.WriteLine($"Part two: {cubesPower}");
+
+// public class Game
+// {
+    // public int Number { get; set; }
+
+    // public List<Round> Rounds { get; set; } = [];
+
+    // public bool IsPossible() => Rounds.All(x => x.IsPossible());
+
+    // public int GetGamePower()
+    // {
+        // int maxRed = Rounds.Max(x => x.RedCubes);
+        // int greenRed = Rounds.Max(x => x.GreenCubes);
+        // int blueRed = Rounds.Max(x => x.BlueCubes);
+
+        // return maxRed * greenRed * blueRed;
+    // }
+
+    // public class Round
+    // {
+        // private readonly int _maxRed = 12;
+        // private readonly int _maxGreen = 13;
+        // private readonly int _maxBlue = 14;
+
+        // public int BlueCubes { get; set; }
+        public int RedCubes { get; set; }
+        public int GreenCubes { get; set; }
+
+        public bool IsPossible() =>
+            RedCubes <= _maxRed && GreenCubes <= _maxGreen && BlueCubes <= _maxBlue;
+    }
+}
+        // public class Day02
+        // {
+        //     private record Cube(string s)
+        //     {
+        //         private string[] Arr => s.Split(" ");
+        //         public string Color => Arr[1];
+        //         public int Amount => int.Parse(Arr[0]);
+        //     }
+        //     private static readonly List<string> Games = Util.ReadFile("/day02/input");
+        //
+        //     private static IEnumerable<Cube> GetCubes(string game) => game.Replace(";", ",").Split(",").Select(x => new Cube(x.Trim())).ToList();
+        //     private static bool PassConfiguration(IEnumerable<Cube> gameCubes)
+        //     {
+        //         var configuration = new Dictionary<string, int>
+        //         {
+        //             { "red", 12 },
+        //             { "green", 13 },
+        //             { "blue", 14 }
+        //         };
+        //         return !gameCubes.Any(c => configuration[c.Color] < c.Amount);
+        //     }
+        //
+        //     public static int One => Games.Select(game => game.Split(":"))
+        //         .Where(x => PassConfiguration(GetCubes(x[1])))
+        //         .Sum(x=> int.Parse(x[0].Split(" ")[1]));
+        //     public static int Two => Games.Select(game => GetCubes(game.Split(":")[1]).GroupBy(c => c.Color)
+        //         .Select(g => g.Max(c => c.Amount))
+        //         .Aggregate(1, (acc, val) => acc * val)).Sum();
+        // }
+            // string[] input = File.ReadAllText("../../../input.txt").Split("\n");
+            // List<string> testInput = new List<string>();
+            // for (int i = 0; i < input.Length; i++)
+            // {
+            //     testInput.Add(input[i]);
+            // }
+            //
+            // var totalpower = Part2(testInput);
+            // Console.WriteLine(totalpower);
+            //     // for (int i = 1; i <= input.Length; i++)
+            //     // {
+            //
+            //     //     string line = input[i-1];
+            //     //     int red = 0, blue = 0, green = 0;
+            //     //     var reveals = line.Split(": ")[1].Split("; ");
+            //     //     foreach (var reveal in reveals)
+            //     //     {
+            //     //         var colorCounts = reveal.Split(", ");
+            //     //         foreach (var colorCount in colorCounts)
+            //     //         {
+            //     //             var split = colorCount.Split(' ');
+            //     //             switch (split[1])
+            //     //             {
+            //     //                 case "red":
+            //     //                     red = Math.Max(red, int.Parse(split[0]));
+            //     //                     break;
+            //     //
+            //     //                 case "blue":
+            //     //                     blue = Math.Max(blue, int.Parse(split[0]));
+            //     //                     break;
+            //     //
+            //     //                 case "green":
+            //     //                     green = Math.Max(green, int.Parse(split[0]));
+            //     //                     break;
+            //     //             }
+            //     //         }
+            //     //     }
+            //     //
+            //     //     int power = red * blue * green;
+            //     //     totalpower += power;
+            //     // }
+            //     // Console.WriteLine(totalpower);
+            //     //     // string line = input[i-1];
+            //     //     // int red = 0, blue = 0, green = 0;
+            //     //     // string lineDetails = line.Split(": ")[1];
+            //     //     // string[] games = lineDetails.Split("; ");
+            //     //     // foreach (string game in games)
+            //     //     // {
+            //     //     //     Console.WriteLine("\t" + game);
+            //     //     //     string[] cubedetails = game.Split(", ");
+            //     //     //     foreach (string cube in cubedetails)
+            //     //     //     {
+            //     //     //         int amount = int.Parse(cube.Split(" ")[0]);
+            //     //     //         string[] split = cube.Split(" ");
+            //     //     //         switch (split[0])
+            //     //     //         {
+            //     //     //             case "red":
+            //     //     //                 red = Math.Max(red, int.Parse(split[0]));
+            //     //     //                 break;
+            //     //     //
+            //     //     //             case "blue":
+            //     //     //                 blue = Math.Max(blue, int.Parse(split[0]));
+            //     //     //                 break;
+            //     //     //
+            //     //     //             case "green":
+            //     //     //                 green = Math.Max(green, int.Parse(split[0]));
+            //     //     //                 break;
+            //     //     //         }
+            //     //     //     }
+            //     //     // }
+            //     //     // Console.WriteLine("\tFewest: ");
+            //     //     // Console.WriteLine(red);
+            //     //     // int power = red * green * blue;
+            //     //     // totalpower += power;
+            // // }
+            //
+        }
+    }
+
 }
\ No newline at end of file
